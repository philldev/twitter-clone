// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String @unique
  password String

  profile   Profile?
  tweets    Tweet[]
  followers Follows[]   @relation("following")
  following Follows[]   @relation("follower")
  TweetLike TweetLike[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  avatar_url String?
  bio        String?
  gender     String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Tweet {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  likes   TweetLike[]

  user    User         @relation(fields: [userId], references: [id])
  userId  String
  replies TweetReply[] @relation("replies")
}

model TweetLike {
  userId  String
  tweetId String

  tweet Tweet @relation(fields: [tweetId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([userId, tweetId])
}

model TweetReply {
  tweetId String

  reply   Tweet  @relation("replies", fields: [replyId], references: [id])
  replyId String

  @@id([tweetId, replyId])
}
